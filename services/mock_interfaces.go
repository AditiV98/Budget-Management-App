// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock_interfaces.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	filters "moneyManagement/filters"
	models "moneyManagement/models"
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
	sql "gofr.dev/pkg/gofr/datasource/sql"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// AuthAdaptor mocks base method.
func (m *MockUser) AuthAdaptor(ctx *gofr.Context, claims *models.GoogleClaims) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthAdaptor", ctx, claims)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthAdaptor indicates an expected call of AuthAdaptor.
func (mr *MockUserMockRecorder) AuthAdaptor(ctx, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthAdaptor", reflect.TypeOf((*MockUser)(nil).AuthAdaptor), ctx, claims)
}

// Create mocks base method.
func (m *MockUser) Create(ctx *gofr.Context, user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockUser) Delete(ctx *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUser)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockUser) GetAll(ctx *gofr.Context, f *filters.User) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, f)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserMockRecorder) GetAll(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUser)(nil).GetAll), ctx, f)
}

// GetByID mocks base method.
func (m *MockUser) GetByID(ctx *gofr.Context, id int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUser)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockUser) Update(ctx *gofr.Context, user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserMockRecorder) Update(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUser)(nil).Update), ctx, user)
}

// MockAccount is a mock of Account interface.
type MockAccount struct {
	ctrl     *gomock.Controller
	recorder *MockAccountMockRecorder
}

// MockAccountMockRecorder is the mock recorder for MockAccount.
type MockAccountMockRecorder struct {
	mock *MockAccount
}

// NewMockAccount creates a new mock instance.
func NewMockAccount(ctrl *gomock.Controller) *MockAccount {
	mock := &MockAccount{ctrl: ctrl}
	mock.recorder = &MockAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccount) EXPECT() *MockAccountMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccount) Create(ctx *gofr.Context, account *models.Account) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, account)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountMockRecorder) Create(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccount)(nil).Create), ctx, account)
}

// Delete mocks base method.
func (m *MockAccount) Delete(ctx *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccount)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockAccount) GetAll(ctx *gofr.Context, f *filters.Account) ([]*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, f)
	ret0, _ := ret[0].([]*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAccountMockRecorder) GetAll(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAccount)(nil).GetAll), ctx, f)
}

// GetByID mocks base method.
func (m *MockAccount) GetByID(ctx *gofr.Context, id int) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAccountMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAccount)(nil).GetByID), ctx, id)
}

// GetByIDForUpdate mocks base method.
func (m *MockAccount) GetByIDForUpdate(ctx *gofr.Context, id, userID int, tx *sql.Tx) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDForUpdate", ctx, id, userID, tx)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDForUpdate indicates an expected call of GetByIDForUpdate.
func (mr *MockAccountMockRecorder) GetByIDForUpdate(ctx, id, userID, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDForUpdate", reflect.TypeOf((*MockAccount)(nil).GetByIDForUpdate), ctx, id, userID, tx)
}

// Update mocks base method.
func (m *MockAccount) Update(ctx *gofr.Context, account *models.Account) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, account)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAccountMockRecorder) Update(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccount)(nil).Update), ctx, account)
}

// UpdateWithTx mocks base method.
func (m *MockAccount) UpdateWithTx(ctx *gofr.Context, account *models.Account, tx *sql.Tx) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithTx", ctx, account, tx)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithTx indicates an expected call of UpdateWithTx.
func (mr *MockAccountMockRecorder) UpdateWithTx(ctx, account, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithTx", reflect.TypeOf((*MockAccount)(nil).UpdateWithTx), ctx, account, tx)
}

// MockTransactions is a mock of Transactions interface.
type MockTransactions struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsMockRecorder
}

// MockTransactionsMockRecorder is the mock recorder for MockTransactions.
type MockTransactionsMockRecorder struct {
	mock *MockTransactions
}

// NewMockTransactions creates a new mock instance.
func NewMockTransactions(ctrl *gomock.Controller) *MockTransactions {
	mock := &MockTransactions{ctrl: ctrl}
	mock.recorder = &MockTransactionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactions) EXPECT() *MockTransactionsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactions) Create(ctx *gofr.Context, transaction *models.Transaction) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, transaction)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransactionsMockRecorder) Create(ctx, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactions)(nil).Create), ctx, transaction)
}

// Delete mocks base method.
func (m *MockTransactions) Delete(ctx *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTransactionsMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransactions)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockTransactions) GetAll(ctx *gofr.Context, f *filters.Transactions) ([]*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, f)
	ret0, _ := ret[0].([]*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTransactionsMockRecorder) GetAll(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTransactions)(nil).GetAll), ctx, f)
}

// GetByID mocks base method.
func (m *MockTransactions) GetByID(ctx *gofr.Context, id int) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTransactionsMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTransactions)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockTransactions) Update(ctx *gofr.Context, transaction *models.Transaction) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, transaction)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTransactionsMockRecorder) Update(ctx, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransactions)(nil).Update), ctx, transaction)
}

// MockSavings is a mock of Savings interface.
type MockSavings struct {
	ctrl     *gomock.Controller
	recorder *MockSavingsMockRecorder
}

// MockSavingsMockRecorder is the mock recorder for MockSavings.
type MockSavingsMockRecorder struct {
	mock *MockSavings
}

// NewMockSavings creates a new mock instance.
func NewMockSavings(ctrl *gomock.Controller) *MockSavings {
	mock := &MockSavings{ctrl: ctrl}
	mock.recorder = &MockSavingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSavings) EXPECT() *MockSavingsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSavings) Create(ctx *gofr.Context, savings *models.Savings) (*models.Savings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, savings)
	ret0, _ := ret[0].(*models.Savings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSavingsMockRecorder) Create(ctx, savings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSavings)(nil).Create), ctx, savings)
}

// CreateWithTx mocks base method.
func (m *MockSavings) CreateWithTx(ctx *gofr.Context, savings *models.Savings, tx *sql.Tx) (*models.Savings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithTx", ctx, savings, tx)
	ret0, _ := ret[0].(*models.Savings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithTx indicates an expected call of CreateWithTx.
func (mr *MockSavingsMockRecorder) CreateWithTx(ctx, savings, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithTx", reflect.TypeOf((*MockSavings)(nil).CreateWithTx), ctx, savings, tx)
}

// Delete mocks base method.
func (m *MockSavings) Delete(ctx *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSavingsMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSavings)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockSavings) GetAll(ctx *gofr.Context) ([]*models.Savings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*models.Savings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSavingsMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSavings)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockSavings) GetByID(ctx *gofr.Context, id int) (*models.Savings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Savings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSavingsMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSavings)(nil).GetByID), ctx, id)
}

// GetByTransactionID mocks base method.
func (m *MockSavings) GetByTransactionID(ctx *gofr.Context, id int) (*models.Savings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTransactionID", ctx, id)
	ret0, _ := ret[0].(*models.Savings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTransactionID indicates an expected call of GetByTransactionID.
func (mr *MockSavingsMockRecorder) GetByTransactionID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTransactionID", reflect.TypeOf((*MockSavings)(nil).GetByTransactionID), ctx, id)
}

// Update mocks base method.
func (m *MockSavings) Update(ctx *gofr.Context, savings *models.Savings) (*models.Savings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, savings)
	ret0, _ := ret[0].(*models.Savings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSavingsMockRecorder) Update(ctx, savings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSavings)(nil).Update), ctx, savings)
}

// UpdateWithTx mocks base method.
func (m *MockSavings) UpdateWithTx(ctx *gofr.Context, savings *models.Savings, IsTransactionID bool, tx *sql.Tx) (*models.Savings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithTx", ctx, savings, IsTransactionID, tx)
	ret0, _ := ret[0].(*models.Savings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithTx indicates an expected call of UpdateWithTx.
func (mr *MockSavingsMockRecorder) UpdateWithTx(ctx, savings, IsTransactionID, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithTx", reflect.TypeOf((*MockSavings)(nil).UpdateWithTx), ctx, savings, IsTransactionID, tx)
}

// MockDashboard is a mock of Dashboard interface.
type MockDashboard struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardMockRecorder
}

// MockDashboardMockRecorder is the mock recorder for MockDashboard.
type MockDashboardMockRecorder struct {
	mock *MockDashboard
}

// NewMockDashboard creates a new mock instance.
func NewMockDashboard(ctrl *gomock.Controller) *MockDashboard {
	mock := &MockDashboard{ctrl: ctrl}
	mock.recorder = &MockDashboardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDashboard) EXPECT() *MockDashboardMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDashboard) Get(ctx *gofr.Context, f *filters.Transactions) (models.Dashboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, f)
	ret0, _ := ret[0].(models.Dashboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDashboardMockRecorder) Get(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDashboard)(nil).Get), ctx, f)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockAuth) GenerateAccessToken(claims *models.GoogleClaims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockAuthMockRecorder) GenerateAccessToken(claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockAuth)(nil).GenerateAccessToken), claims)
}

// GenerateGoogleToken mocks base method.
func (m *MockAuth) GenerateGoogleToken(ctx *gofr.Context, code string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateGoogleToken", ctx, code)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateGoogleToken indicates an expected call of GenerateGoogleToken.
func (mr *MockAuthMockRecorder) GenerateGoogleToken(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateGoogleToken", reflect.TypeOf((*MockAuth)(nil).GenerateGoogleToken), ctx, code)
}

// GenerateRefreshToken mocks base method.
func (m *MockAuth) GenerateRefreshToken(claims *models.GoogleClaims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockAuthMockRecorder) GenerateRefreshToken(claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockAuth)(nil).GenerateRefreshToken), claims)
}

// ValidateRefreshToken mocks base method.
func (m *MockAuth) ValidateRefreshToken(tokenStr string) (jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRefreshToken", tokenStr)
	ret0, _ := ret[0].(jwt.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRefreshToken indicates an expected call of ValidateRefreshToken.
func (mr *MockAuthMockRecorder) ValidateRefreshToken(tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRefreshToken", reflect.TypeOf((*MockAuth)(nil).ValidateRefreshToken), tokenStr)
}

// VerifyGoogleIDToken mocks base method.
func (m *MockAuth) VerifyGoogleIDToken(ctx context.Context, idToken string) (*models.GoogleClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyGoogleIDToken", ctx, idToken)
	ret0, _ := ret[0].(*models.GoogleClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyGoogleIDToken indicates an expected call of VerifyGoogleIDToken.
func (mr *MockAuthMockRecorder) VerifyGoogleIDToken(ctx, idToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyGoogleIDToken", reflect.TypeOf((*MockAuth)(nil).VerifyGoogleIDToken), ctx, idToken)
}

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// ValidateToken mocks base method.
func (m *MockValidator) ValidateToken(tokenStr string) (jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenStr)
	ret0, _ := ret[0].(jwt.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockValidatorMockRecorder) ValidateToken(tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockValidator)(nil).ValidateToken), tokenStr)
}
